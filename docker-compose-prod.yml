version: '3.8'

services:
  zookeeper:
    image: zookeeper:3.6.3
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.6.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  mysql_user:
    image: mysql:8.0.33
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: studystream
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_USER: shadow
      MYSQL_PASSWORD: 1234

  mysql_mail:
    image: mysql:8.0.33
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: mail
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_USER: shadow
      MYSQL_PASSWORD: 1234

  postgresql_auth:
    image: postgres:16.2
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: studystream
      POSTGRES_USER: shadow
      POSTGRES_PASSWORD: 1234
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data

  postgresql_course:
    image: postgres:16.2
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: courseservice
      POSTGRES_USER: shadow
      POSTGRES_PASSWORD: 1234
    volumes:
      - postgres_course_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  eureka-server:
    image: ghostshadow2/eureka-server:latest
    ports:
      - "8081:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  config-server:
    image: ghostshadow2/config-server:latest
    ports:
      - "8888:8080"
    volumes:
      - ./config/properties:/app/config
#    TODO: fix config and docker file generate config there
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 3

  auth-service:
    image: ghostshadow2/auth-service:latest
    ports:
      - "8083:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
      - spring.config.import=http://config-service:8888
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 3

  api-gateway:
    image: ghostshadow2/api-gateway:latest
    ports:
      - "8082:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
      - spring.config.import=http://config-service:8888
    depends_on:
      config-server:
        condition: service_healthy
      mail-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
      user-service:
        condition: service_healthy

  mail-service:
    image: ghostshadow2/mail-service:latest
    ports:
      - "8086:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
      - spring.config.import=http://config-service:8888
      - SPRING_MAIL_USERNAME=${MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${MAIL_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 3

  course-service:
    image: ghostshadow2/course-service:latest
    ports:
      - "8085:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
      - spring.config.import=http://config-service:8888
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 3

  user-service:
    image: ghostshadow2/user-service:latest
    ports:
      - "8084:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8081/eureka
      - spring.config.import=http://config-service:8888
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 10s
      retries: 3

volumes:
  postgres_auth_data:
  postgres_course_data: